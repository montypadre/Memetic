[{"/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/index.js":"1","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/serviceWorker.js":"2","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/App.js":"3","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/Navbar.js":"4","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/Main.js":"5"},{"size":1936,"mtime":1611079666159,"results":"6","hashOfConfig":"7"},{"size":4951,"mtime":1610477741743,"results":"8","hashOfConfig":"7"},{"size":2996,"mtime":1610909484570,"results":"9","hashOfConfig":"7"},{"size":1207,"mtime":1610725831116,"results":"10","hashOfConfig":"7"},{"size":3157,"mtime":1611079751012,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"wo6bjo",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/index.js",["25","26","27","28","29"],"/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/serviceWorker.js",[],["30","31"],"/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/App.js",["32"],"import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.scss';\nimport Memetic from '../abis/Memetic.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Memetic.networks[networkId]\n    if(networkData) {\n      const memetic = web3.eth.Contract(Memetic.abi, networkData.address)\n      this.setState({ memetic })\n      const postCount = await memetic.methods.postCount().call()\n      this.setState({ postCount })\n      // Load Posts\n      for (var i = 1; i <= postCount; i++) {\n        const post = await memetic.methods.posts(i).call()\n        this.setState({\n          posts: [...this.state.posts, post]\n        })\n      }\n      // Sort posts. Show highest tipped post first\n      this.setState({\n        posts: this.state.posts.sort((a, b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false })\n    } else {\n      window.alert('Memetic contract not deployed to detected network.')\n    }\n    // Address\n    // ABI\n  }\n\n  createPost(content) {\n    this.setState({ loading: true })\n    this.state.memetic.methods.createPost(content).send({ from: this.state.account })\n    .once('confirmation', (n, receipt) => {\n      this.setState({ loading: false })\n      window.location.reload()\n    })\n  }\n\n  tipPost(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.memetic.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\n    .once('confirmation', (n, receipt) => {\n      this.setState({ loading: false })\n      window.location.reload()\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      memetic: null,\n      postCount: 0,\n      posts: [],\n      loading: true\n    }\n\n    this.createPost = this.createPost.bind(this)\n    this.tipPost = this.tipPost.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n            ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n            : <Main \n                posts={this.state.posts} \n                createPost={this.createPost}\n                tipPost={this.tipPost}\n              />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/Navbar.js",["33"],"import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <a\n              className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n              href=\"http://www.dappuniversity.com/bootcamp\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Memetic\n            </a>\n            <ul className=\"navbar-nav px-3\">\n              <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n                <small className=\"text-secondary\">\n                 <small id=\"account\">{this.props.account}</small>\n                </small>\n                { this.props.account \n                  ? <img \n                    className='ml-2' \n                    width='30' \n                    height='30' \n                    src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`} \n                  />\n                  : <span></span>\n                }\n              </li>\n            </ul>\n          </nav>\n        );\n    }\n}\n\nexport default Navbar;","/mnt/c/Users/mreyn/Documents/Memetic/memetic/src/components/Main.js",["34","35"],{"ruleId":"36","severity":1,"message":"37","line":9,"column":5,"nodeType":"38","messageId":"39","endLine":9,"endColumn":19},{"ruleId":"36","severity":1,"message":"40","line":11,"column":5,"nodeType":"38","messageId":"39","endLine":11,"endColumn":22},{"ruleId":"36","severity":1,"message":"41","line":12,"column":5,"nodeType":"38","messageId":"39","endLine":12,"endColumn":21},{"ruleId":"36","severity":1,"message":"42","line":13,"column":5,"nodeType":"38","messageId":"39","endLine":13,"endColumn":22},{"ruleId":"36","severity":1,"message":"43","line":16,"column":10,"nodeType":"38","messageId":"39","endLine":16,"endColumn":16},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"36","severity":1,"message":"48","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":17},{"ruleId":"49","severity":1,"message":"50","line":23,"column":21,"nodeType":"51","endLine":28,"endColumn":21},{"ruleId":"36","severity":1,"message":"52","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":35,"column":25,"nodeType":"51","endLine":40,"endColumn":27},"no-unused-vars","'DropdownToggle' is defined but never used.","Identifier","unusedVar","'DropdownSeparator' is defined but never used.","'DropdownPosition' is defined but never used.","'DropdownDirection' is defined but never used.","'ThIcon' is defined but never used.","no-native-reassign",["53"],"no-negated-in-lhs",["54"],"'Identicon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation"]